import OpenAI from 'openai';
import Anthropic from '@anthropic-ai/sdk';

// Security helper for sensitive logging
function secureLog(message: string, data?: any) {
  console.log(`[Supervisor Agent] ${message}`, data ? { ...data, keys: Object.keys(data) } : '');
}

class SupervisorAgentService {
  private openai: OpenAI | null = null;
  private anthropic: Anthropic | null = null;

  constructor() {
    this.initializeClients();
  }

  private initializeClients() {
    try {
      if (process.env.OPENAI_API_KEY) {
        this.openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });
        secureLog('OpenAI client initialized successfully');
      }

      if (process.env.ANTHROPIC_API_KEY) {
        this.anthropic = new Anthropic({
          apiKey: process.env.ANTHROPIC_API_KEY,
        });
        secureLog('Anthropic client initialized successfully');
      }

      if (!this.openai && !this.anthropic) {
        console.warn('No AI service clients available. Please check API keys.');
      }
    } catch (error) {
      console.error('Error initializing AI clients:', error);
    }
  }

  async generateAnalysis(prompt: string, preferredService: 'openai' | 'anthropic' = 'openai'): Promise<string> {
    try {
      if (preferredService === 'openai' && this.openai) {
        return await this.generateWithOpenAI(prompt);
      } else if (this.anthropic) {
        return await this.generateWithAnthropic(prompt);
      } else if (this.openai) {
        return await this.generateWithOpenAI(prompt);
      } else {
        throw new Error('No AI service available');
      }
    } catch (error) {
      console.error('Error in generateAnalysis:', error);
      return 'Analysis temporarily unavailable. Please try again later.';
    }
  }

  private async generateWithOpenAI(prompt: string): Promise<string> {
    if (!this.openai) throw new Error('OpenAI client not available');
    
    const completion = await this.openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 1000,
      temperature: 0.7,
    });

    return completion.choices[0]?.message?.content || 'No response generated';
  }

  private async generateWithAnthropic(prompt: string): Promise<string> {
    if (!this.anthropic) throw new Error('Anthropic client not available');
    
    const completion = await this.anthropic.messages.create({
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 1000,
      messages: [{ role: "user", content: prompt }],
    });

    return completion.content[0]?.type === 'text' 
      ? completion.content[0].text 
      : 'No response generated';
  }

  /**
   * Generate comprehensive Patient Progress Report using AI analysis
   */
  async analyzeAndGeneratePpr(dataBundle: any): Promise<string> {
    try {
      const promptText = `
You are a healthcare AI generating a comprehensive Patient Progress Report (PPR). Analyze the following patient data and create a detailed, professional medical report.

PATIENT DATA:
- Name: ${dataBundle.patient.name}
- Patient ID: ${dataBundle.patient.id}
- Analysis Period: ${dataBundle.analysisTimeframe.startDate.toDateString()} to ${dataBundle.analysisTimeframe.endDate.toDateString()}

HEALTH SCORES (${dataBundle.scores.length} submissions):
${dataBundle.scores.map((score: any) => `${score.scoreDate.toDateString()}: Diet=${score.dietScore}, Exercise=${score.exerciseScore}, Medication=${score.medicationScore}`).join('\n')}

ACHIEVEMENTS (${dataBundle.badges.length} badges earned):
${dataBundle.badges.map((badge: any) => `${badge.earnedDate.toDateString()}: ${badge.badgeTier} ${badge.badgeName}`).join('\n')}

ACTIVITY SUMMARY:
- Daily Score Submissions: ${dataBundle.featureUsage.dailyScoresSubmissions}
- Active Days: ${dataBundle.featureUsage.totalDaysActive}
- Estimated Interactions: ${dataBundle.featureUsage.chatbotInteractions}

Generate a comprehensive PPR including:
1. Executive Summary
2. Health Trends Analysis
3. Behavioral Patterns
4. Achievement Recognition
5. Recommendations for Care Plan
6. Risk Assessment
7. Next Steps

Format as a professional medical report suitable for healthcare providers.
`;

      const analysis = await this.generateAnalysis(promptText);
      
      return `
# Patient Progress Report (PPR)
**Generated:** ${new Date().toISOString()}
**Patient:** ${dataBundle.patient.name} (ID: ${dataBundle.patient.id})
**Period:** ${dataBundle.analysisTimeframe.totalDays} days

${analysis}

---
*This report was generated by KGCPR AI Health Assistant*
`;

    } catch (error) {
      console.error('Error generating PPR:', error);
      return `PPR Generation Error: Unable to complete analysis for Patient ID ${dataBundle.patient.id}. Please contact support.`;
    }
  }

  async analyzeHealthScores(scores: any[]): Promise<string> {
    if (!scores || scores.length === 0) {
      return "No health scores available for analysis. Please submit daily scores to receive personalized insights.";
    }

    try {
      const latestScore = scores[scores.length - 1];
      const avgDiet = scores.reduce((sum, s) => sum + s.dietScore, 0) / scores.length;
      const avgExercise = scores.reduce((sum, s) => sum + s.exerciseScore, 0) / scores.length;
      const avgMedication = scores.reduce((sum, s) => sum + s.medicationScore, 0) / scores.length;

      const prompt = `
Analyze these health tracking scores and provide encouraging, actionable feedback:

Latest Scores: Diet=${latestScore.dietScore}/10, Exercise=${latestScore.exerciseScore}/10, Medication=${latestScore.medicationScore}/10
Average Scores: Diet=${avgDiet.toFixed(1)}/10, Exercise=${avgExercise.toFixed(1)}/10, Medication=${avgMedication.toFixed(1)}/10
Total submissions: ${scores.length}

Provide specific, encouraging advice in 2-3 sentences focusing on strengths and gentle suggestions for improvement.
`;

      return await this.generateAnalysis(prompt);
    } catch (error) {
      console.error('Error analyzing health scores:', error);
      return "Thank you for tracking your health! Keep up the consistent effort - every score you submit helps build better health habits.";
    }
  }

  async generateProactiveSuggestion(trend: any, patientData: any): Promise<string> {
    try {
      const prompt = `
You are a proactive health assistant. Based on this patient trend, generate a helpful, encouraging suggestion:

Trend: ${trend.type} (${trend.description})
Patient Context: ${JSON.stringify(patientData, null, 2)}

Generate a brief, actionable suggestion (1-2 sentences) that:
1. Acknowledges their effort
2. Provides specific next steps
3. Encourages continued engagement

Keep it positive and supportive.
`;

      const suggestion = await this.generateAnalysis(prompt);
      
      secureLog('Proactive suggestion generated successfully', { 
        suggestionLength: suggestion.length 
      });

      return suggestion;

    } catch (error) {
      console.error('Error generating proactive suggestion:', error);
      
      if (trend.type === 'negative_streak') {
        return `I notice you've been working hard on your health journey. Would you like to try the 'Inspiration Machine D' for some fresh motivation?`;
      } else {
        return `Congratulations on your progress! Would you like to celebrate by setting a new goal in your 'Progress Milestones'?`;
      }
    }
  }

  /**
   * Process user chat query with personalized context
   */
  async processQuery(userId: number, userQuery: string): Promise<string> {
    secureLog('Supervisor processing started', { userId });
    
    try {
      const systemPrompt = `
You are the KGC Health Assistant, a caring, motivational, and hyper-competent health companion. Your primary goal is to help users adhere to their doctor's care plan in an encouraging way by seamlessly integrating their goals into real-world activities.

CORE PERSONALITY TRAITS:
- Warm, empathetic, and genuinely caring
- Motivational without being pushy
- Evidence-based and scientifically grounded
- Respectful of individual differences and preferences
- Solution-focused with practical, actionable advice
- Encouraging during setbacks and celebrating successes

THERAPEUTIC APPROACH:
- Use Motivational Interviewing techniques to explore ambivalence
- Apply CBT principles to help reframe negative thoughts
- Focus on intrinsic motivation rather than external pressure
- Support behaviour change through small, achievable steps
- Validate emotions while encouraging progress

Respond to the user's query in a helpful, encouraging manner. Keep responses concise but caring.
`;

      const fullPrompt = `${systemPrompt}\n\nUser Query: ${userQuery}`;
      
      const response = await this.generateAnalysis(fullPrompt);
      
      secureLog('Chat query processed successfully', { 
        userId, 
        queryLength: userQuery.length,
        responseLength: response.length 
      });

      return response;

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      secureLog('CRITICAL ERROR in Supervisor Agent', { error: errorMessage });
      return "I'm sorry, I'm having trouble responding right now. Please try again shortly, and remember that I'm here to support your health journey.";
    }
  }
}

export const supervisorAgentService = new SupervisorAgentService();